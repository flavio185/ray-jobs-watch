# This is a GitHub Actions workflow file that defines a CI/CD pipeline.
# It automates the process of building a Docker image and pushing it to Docker Hub.

# The name of the workflow as it will appear in the "Actions" tab of your GitHub repository.
name: Build and Push Docker Image

# This section defines the trigger for the workflow.
# 'on' specifies the events that trigger the workflow.
on:
  # 'push' means the workflow runs whenever someone pushes to the repository.
  push:
    # We restrict this to only run on pushes to the 'main' branch.
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # We define a single job named 'build-and-push'.
  build-and-push:
    # The type of runner that the job will run on. 'ubuntu-latest' is a standard, reliable choice.
    runs-on: ubuntu-latest
    
    # 'steps' are a sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check out the repository's code
      # This action checks out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      # This action handles the 'docker login' command securely.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # The username for Docker Hub. It's stored securely as a GitHub secret.
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          # The password or access token for Docker Hub. Also stored as a secret.
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Set up Docker Buildx
      # This action sets up the Docker Buildx builder instance, which enables more advanced features
      # like building multi-platform images (though we are not using that feature here).
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Build the Docker image and push it to the registry
      # This is the main action that combines 'docker build' and 'docker push'.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # 'context: .' tells the action that the build context (where it finds the Dockerfile and source code)
          # is the root of the repository.
          context: .
          # 'push: true' tells the action to push the image to the registry after a successful build.
          push: true
          # 'tags:' specifies the tag for the image. We are using the exact tag you provided.
          tags: flavio185/fastapi-duckdb-app:{{ github.ref_name }}  # Tags the image with the branch name (e.g., 'main').
          #
          # --- Alternative Tagging Strategy (for future use) ---
          # For more dynamic versioning, you could use tags like this:
          # tags: |
          #   flavio185/fastapi-duckdb-app:latest
          #   flavio185/fastapi-duckdb-app:${{ github.sha }}
